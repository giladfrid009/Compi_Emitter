%{

#include "errors.hpp"
#include "symbol/symbol_table.hpp"
#include "syntax/generic_syntax.hpp" 
#include "emit/code_buffer.hpp"
#include "types.hpp"
#include <list>
#include <string>
#include <iostream>
#include <sstream>

using std::vector;
using std::string;

extern int yylineno;
extern int yylex();

static symbol_table& sym_tab = symbol_table::instance();
static code_buffer& code_buf = code_buffer::instance();

void yyerror(const char* message);

void add_builtin_functions();

%}

%code requires 
{
    #include "syntax/syntax_token.hpp"
    #include "syntax/abstract_syntax.hpp" 
    #include "syntax/generic_syntax.hpp" 
    #include "syntax/expression_syntax.hpp"
    #include "syntax/statement_syntax.hpp" 
}

%union 
{                                    
    syntax_token*                             token;
    root_syntax*                              root;
    type_syntax*                              type;  
    parameter_syntax*                         param;     
    function_header_syntax*                   header;            
    function_declaration_syntax*              function;            
    statement_syntax*                         statement; 	
    expression_syntax*                        expression;  
    list_syntax<parameter_syntax>*            param_list;		         
    list_syntax<function_declaration_syntax>* function_list;	
    list_syntax<statement_syntax>*            statement_list;
    list_syntax<expression_syntax>*           expression_list;                
 };

%token END 0
%token <token> VOID
%token <token> INT
%token <token> BYTE
%token <token> B
%token <token> BOOL
%token <token> TRUE
%token <token> FALSE
%token <token> RETURN
%token <token> WHILE
%token <token> BREAK
%token <token> CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token <token> NUM
%token <token> ID
%token <token> STRING

%right LPAREN
%left RPAREN
%right <token> ASSIGN
%nonassoc <token> ELSE
%nonassoc <token> IF
%left <token> OR
%left <token> AND
%left <token> EQOP
%left <token> RELOP
%left <token> ADDOP
%left <token> MULOP
%right <token> NOT

%type <root>            Program
%type <function_list>   Funcs
%type <header>          FuncHeader
%type <function>        FuncDecl
%type <type>            RetType
%type <param_list> 	    Params
%type <param_list>      ParamsList
%type <param>           ParamDecl
%type <statement_list>  Statements
%type <statement>   	Statement
%type <expression>      Call
%type <expression_list> ExpList
%type <type>			Type
%type <expression>      Exp

%%

Program 	: Funcs END										        { $$ = new root_syntax($1); $$->emit(); delete $$; }
			;       
Funcs   	: %empty                                                { $$ = new list_syntax<function_declaration_syntax>(); }
      		| FuncDecl Funcs					                    { $$ = $2->push_front($1); }
			;
FuncDecl    : FuncHeader LBRACE Statements CS RBRACE                { $$ = new function_declaration_syntax($1, $3); }
            ;
FuncHeader 	: RetType ID LPAREN Params RPAREN                       { $$ = new function_header_syntax($1, $2, $4); } 
			;
RetType 	: Type                                                  { $$ = $1; }
        	| VOID                                                  { $$ = new type_syntax($1); }
			;       
Params 	    : %empty                                                { $$ = new list_syntax<parameter_syntax>(); }
        	| ParamsList                                            { $$ = $1; }
			;       
ParamsList  : ParamDecl                                             { $$ = new list_syntax<parameter_syntax>($1); }
			| ParamDecl COMMA ParamsList                            { $$ = $3->push_front($1); }
			;       
ParamDecl 	: Type ID                                               { $$ = new parameter_syntax($1, $2); }
			;       
Statements	: Statement	                                            { $$ = new list_syntax<statement_syntax>($1); }
 			| Statements Statement                                  { $$ = $1->push_back($2); }
			;
Statement	: LBRACE OS Statements CS RBRACE                        { $$ = new block_statement($3); }
			| Type ID SC                                            { $$ = new declaration_statement($1, $2); }
			| Type ID ASSIGN Exp SC                                 { $$ = new declaration_statement($1, $2, $3, $4); }
			| ID ASSIGN Exp SC                                      { $$ = new assignment_statement($1, $2, $3); }
			| Call SC                                               { $$ = new expression_statement($1); }
			| RETURN SC	                                            { $$ = new return_statement($1); }
			| RETURN Exp SC                                         { $$ = new return_statement($1, $2); }
			| IF LPAREN Exp RPAREN OS Statement CS                  { $$ = new if_statement($1, $3, $6); }
			| IF LPAREN Exp RPAREN OS Statement CS
              ELSE OS Statement CS                                  { $$ = new if_statement($1, $3, $6, $8, $10); }
			| WHILE LPAREN Exp RPAREN OSL Statement CS              { $$ = new while_statement($1, $3, $6); }
			| BREAK SC                                              { $$ = new branch_statement($1); }
			| CONTINUE SC                                           { $$ = new branch_statement($1); }
            ;       
Call 		: ID LPAREN ExpList RPAREN                              { $$ = new invocation_expression($1, $3); }
 			| ID LPAREN RPAREN                                      { $$ = new invocation_expression($1); }
			;       
ExpList 	: Exp                                                   { $$ = new list_syntax<expression_syntax>($1); }
 			| Exp COMMA ExpList                                     { $$ = $3->push_front($1); }
			;       
Type 		: INT                                                   { $$ = new type_syntax($1); }
			| BYTE                                                  { $$ = new type_syntax($1); }
			| BOOL                                                  { $$ = new type_syntax($1); }
			;       
Exp 		: LPAREN Exp RPAREN	                                    { $$ = $2; }
            | Exp IF LPAREN Exp RPAREN ELSE Exp                     { $$ = new conditional_expression($1, $2, $4, $6, $7); }
			| Exp ADDOP Exp                                         { $$ = new arithmetic_expression($1, $2, $3); }
            | Exp MULOP Exp                                         { $$ = new arithmetic_expression($1, $2, $3); }
			| ID                                                    { $$ = new identifier_expression($1); }
			| Call                                                  { $$ = $1; }
			| NUM                                                   { $$ = new literal_expression<int>($1); }
			| NUM B                                                 { $$ = new literal_expression<unsigned char>($1); delete $2; }
			| STRING                                                { $$ = new literal_expression<string>($1); }
			| TRUE                                                  { $$ = new literal_expression<bool>($1); }
			| FALSE                                                 { $$ = new literal_expression<bool>($1); }
			| NOT Exp                                               { $$ = new not_expression($1, $2); }
			| Exp AND Exp                                           { $$ = new logical_expression($1, $2, $3); }
			| Exp OR Exp                                            { $$ = new logical_expression($1, $2, $3); }
			| Exp RELOP Exp                                         { $$ = new relational_expression($1, $2, $3); }
            | Exp EQOP Exp                                          { $$ = new relational_expression($1, $2, $3); } 
			| LPAREN Type RPAREN Exp %prec NOT                      { $$ = new cast_expression($2, $4); }
			;
OS          : %empty                                                { sym_tab.open_scope(); } 
            ;
OSL         : %empty                                                { sym_tab.open_scope(true); }
            ;
CS          : %empty                                                { sym_tab.close_scope(); }
            ;
%%

int main()
{
    sym_tab.open_scope();
    
    add_builtin_functions();

    int res = yyparse();

    sym_tab.close_scope();

    code_buf.print();

    return res;
}

void yyerror(const char* message)
{
    output::error_syn(yylineno);
}

void add_builtin_functions()
{
    sym_tab.add_function("print", type_kind::Void, vector<type_kind>{type_kind::String});
    sym_tab.add_function("printi", type_kind::Void, vector<type_kind>{type_kind::Int});

    code_buf.emit_from_file("builtin_functions.llvm");
}
